C library for creating and accessing dynamic arrays
	
judy is a c library that implements a dynamic array.  empty judy arrays are
declared with null pointers.  a judy array consumes memory only when
populated yet can grow to take advantage of all available memory.  judy's key
benefits are:  scalability, performance, memory efficiency, and ease of use.
judy arrays are designed to grow without tuning into the peta-element range,
scaling near o(log-base-256).

judy arrays are accessed with insert, retrieve, and delete calls for number
or string indexes.  configuration and tuning are not required -- in fact not
possible.  judy offers sorting, counting, and neighbor/empty searching.
indexes can be sequential, clustered, periodic, or random -- it doesn't
matter to the algorithm.  judy arrays can be arranged hierarchically to
handle any bit patterns -- large indexes, sets of keys, etc.

judy is often an improvement over common data structures such as:  arrays,
sparse arrays, hash tables, b-trees, binary trees, linear lists, skiplists,
other sort and search algorithms, and counting functions.