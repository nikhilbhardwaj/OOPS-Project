Bison-style parser generator for c++
	
bisonc++ was designed after `bison++', created by alain coetmeur. bisonc++
adds to bison++ a cleaner class-design, using a base-class to communicate
lexical tokens to a lexical scanner.

since bisonc++ generates the parser class as well as the parsing
function. the class can easily be provided with additional members without
needing polymorphic functions. consequently, classes generated by bisonc++
have no virtual members and actually have but one public member: parse(),
replacing the old-style bison and bison++ yyparse() function.

bisonc++ offers many options, among which an option to define classes
generated by bisonc++ in a separate namespace. this allows developers to
define additional symbols, even outside of the class generated by bisonc++,
without encountering name-collision problems. with bisonc++, artificial means
to prevent name-collisions, like bison and bison++'s yy-convention are not
required anymore when using bisonc++.  bisonc++ merely generates c++ code. if
c code is required, bison should be used. bisonc++'s grammar requirements are
highly compatible with bison's requirements, so converting a bison grammar
into a bisonc++ grammar should be fairly simple.

in addition to the bisonc++ parser generator itself and several skeleton
files, the package contains an extensive man-page, a full manual rewritten
after the original bison manual, and several examples.

some history: bisonc++ versions 0.98 is a complete rewrite of an lalr(1)
parser generator, as described in aho, sethi and ullman's (1986) book
`compilers' (a.k.a. the `dragon book'). version 0.98 was completed in may
2005. another major rewrite was completed one year later, may 2006, resulting
in version 1.00.

this package provides the supplemental documentation for bisonc++.