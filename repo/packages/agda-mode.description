The emacs mode for agda
	
agda is a dependently typed functional programming language: it has inductive
families, which are like haskell's gadts, but they can be indexed by values and
not just types. it also has parameterised modules, mixfix operators, unicode
characters, and an interactive emacs interface (the type checker can assist in
the development of your code).

agda is also a proof assistant: it is an interactive system for writing and
checking proofs. agda is based on intuitionistic type theory, a foundational
system for constructive mathematics developed by the swedish logician per
martin-l√∂f. it has many similarities with other proof assistants based on
dependent types, such as coq, epigram and nuprl.

this package contains the emacs interactive development mode for agda. this
mode is the preferred way to write agda code, and offers features such as
iterative development, refinement, case analysis and so on.