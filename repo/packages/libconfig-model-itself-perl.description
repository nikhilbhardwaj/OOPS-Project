Graphical model editor for config::model
	
config::model::itself and the command config-model-edit provide
a perl/tk graphical interface to edit configuration models that will
be used by config::model.

config::model::itself also provides a model for config::model
(hence the itself name, you can also think of it as a meta-model).
the model editor will use this meta-model to construct the graphical
interface so you can edit the configuration model for *your*
application. [ config::model::itself is the "eat your own dog food" principle
applied to config::model ;-) ]

let's step back a little to explain. any configuration data is, in
essence, structured data. this data could be stored, for instance, in
an xml file. a configuration model is a way to describe the structure
and relation of all items of a configuration data set.

this configuration model is also expressed as structured data. this
structure data is structured and follows a set of rules which are
described for humans in config::model.

the structure and rules documented in config::model are also expressed
in a model in the files provided with config::model::itself.

hence the possibity to verify, modify configuration data provided by
config::model can also be applied on configuration models.

the model editor program is config-model-edit.

since the model editor and the configuration data editor are based on
the same graphical module, you will use similar uis to edit
configuration data (for instance openssh configuration data from
sshd_config) and openssh model (if you need to add new parameters in openssh
model)

once this package is installed, you can run:


 $ config-model-edit -model <model_name>


for instance, if you have installed config::model::openssh (not yet packaged),
you can run:


 $ config-model-edit -model openssh


if you save openssh configuration model, config-model-edit will create a
lib directory and write the modified model there.