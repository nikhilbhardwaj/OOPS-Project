Anonymizing overlay network for tcp
	
tor is a connection-based low-latency anonymous communication system which
addresses many flaws in the original onion routing design.

in brief, onion routing is a connection-oriented anonymizing communication
service. users choose a source-routed path through a set of nodes, and
negotiate a "virtual circuit" through the network, in which each node
knows its predecessor and successor, but no others. traffic flowing down
the circuit is unwrapped by a symmetric key at each node, which reveals
the downstream node.

basically tor provides a distributed network of servers ("onion
routers"). users bounce their tcp streams (web traffic, ftp, ssh, etc)
around the routers, and recipients, observers, and even the routers
themselves have difficulty tracking the source of the stream.

note that tor does no protocol cleaning.  that means there is a danger that
application protocols and associated programs can be induced to reveal
information about the initiator.  tor depends on privoxy and similar protocol
cleaners to solve this problem.

client applications can use the tor network by connecting to the local
onion proxy.  if the application itself does not come with socks support
you can use a socks client such as tsocks.  some web browsers like mozilla
and web proxies like privoxy come with socks support, so you don't need an
extra socks client if you want to use tor with them.

this package enables only the onion proxy by default, but it can be configured
as a relay (server) node.

remember that this is development code -- don't rely on the current tor
network if you really need strong anonymity.

the latest information can be found at https://www.torproject.org/, or on the
mailing lists, archived at http://archives.seul.org/or/talk/ or
http://archives.seul.org/or/announce/.