Gnu r / c++ interface classes and examples
	
the rcpp package contains a c++ library that facilitates the integration of
r and c++ in various ways.

r data types (sexp) are matched to c++ objects in a class hierarchy.  all r
types are supported (vectors, functions, environment, etc ...)  and each
type is mapped to a dedicated class. for example, numeric vectors are
represented as instances of the rcpp::numericvector class, environments are
represented as instances of rcpp::environment, functions are represented as
rcpp::function, etc ...

the underlying c++ library also offers the rcpp::wrap function which is a
templated function that transforms an arbitrary object into a sexp.  this
makes it straightforward to implement c++ logic in terms of standard c++
types such as stl containers and then wrap them when they need to be
returned to r. internally, wrap uses advanced template meta programming
techniques and currently supports : primitive types (bool, int, double,
size_t, rbyte, rcomplex, std::string), stl containers (e.g std::vector<t>)
where t is wrappable, stl maps (e.g std::map<std::string,t>) where t is
wrappable, and arbitrary types that support implicit conversion to sexp.

the reverse conversion (from r to c++) is performed by the rcpp::as function
template offering a similar degree of flexibility.

the package also contains a set of classes---which we call the `classic rcpp
api'---that were provided in an earlier api for r and c++ integration. due
to its continued use, the classic api is retained and will be supported for
the foreseable future. the classic api includes support for r types real,
integer, character, vector, matrix, date, datetime (i.e.  posixct) at
microsecond resolution, data frame, and function. transfer to and from
simple or complex sexp objects is made easy thanks to automatic conversion
made possible by c++ template conversion. calling r functions from c++ is
also supported.

c++ code can be 'inlined' by using the 'inline' package which will create a
c++ function and compile, link and load it given the 'inlined' character
argument which makes c++ integration very easy.

several examples are included, and 735 unit tests in 329 functions
provide addtional usage examples.